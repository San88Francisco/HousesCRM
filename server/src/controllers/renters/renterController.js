import {
  validateObjectId,
  validateCreateRenterData,
  validatePaginationParams,
  validateUpdateData,
} from './validation.js';
import {
  createRenterObject,
  prepareUpdateFields,
  buildFilter,
  calculatePaginationMeta,
  createRenterResponse,
} from '../../utils/renters/utils.js';
import {
  findHouseById,
  insertRenter,
  countRenters,
  findRentersWithPagination,
  findRenterById,
  checkRenterExists,
  updateRenterById,
  getUpdatedRenterWithHouse,
  deleteRenterById,
} from './dbOperations.js';
import { HTTP_STATUS } from '../../constants/httpStatus.js';
import { VALIDATION } from '../../constants/validation.js';
import { DEFAULTS } from '../../constants/defaults.js';

// üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∞—Ä—è
const createRenter = async (req, res) => {
  const { house_id, name, start, finish, pricePerMonth } = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
  const validation = validateCreateRenterData({
    house_id,
    name,
    start,
    pricePerMonth,
  });
  if (!validation.isValid) {
    return res.status(validation.error.status).json(validation.error);
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–≤–∞—Ä—Ç–∏—Ä–∞
    const house = await findHouseById(house_id);
    if (!house) {
      return res
        .status(HTTP_STATUS.NOT_FOUND)
        .json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ—Ä–µ–Ω–¥–∞—Ä—è
    const newRenter = createRenterObject({
      house_id,
      name,
      start,
      finish,
      pricePerMonth,
    });
    const result = await insertRenter(newRenter);

    console.warn('–í—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ—Ä–µ–Ω–¥–∞—Ä:', result.insertedId);

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const createdRenter = createRenterResponse(
      newRenter,
      result.insertedId,
      house
    );

    res.status(HTTP_STATUS.CREATED).json({
      message: '–û—Ä–µ–Ω–¥–∞—Ä—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      renter: createdRenter,
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∞—Ä—è:', error);
    res
      .status(HTTP_STATUS.INTERNAL_ERROR)
      .json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
const getRenters = async (req, res) => {
  try {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    const page = parseInt(req.query.page, 10) || DEFAULTS.PAGE;
    const limit = parseInt(req.query.limit, 10) || DEFAULTS.LIMIT;
    const skip = (page - DEFAULTS.PAGE) * limit;
    const house_id = req.query.house_id;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    const paginationValidation = validatePaginationParams(page, limit);
    if (!paginationValidation.isValid) {
      return res
        .status(paginationValidation.error.status)
        .json(paginationValidation.error);
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è house_id, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if (house_id) {
      const houseIdValidation = validateObjectId(house_id, 'house_id');
      if (!houseIdValidation.isValid) {
        return res
          .status(houseIdValidation.error.status)
          .json(houseIdValidation.error);
      }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
    const filter = buildFilter(house_id);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const totalCount = await countRenters(filter);
    const renters = await findRentersWithPagination(filter, skip, limit);

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    const pagination = calculatePaginationMeta(page, limit, totalCount);

    res.json({ renters, pagination });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤:', error);
    res
      .status(HTTP_STATUS.INTERNAL_ERROR)
      .json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üëÅÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Ä–µ–Ω–¥–∞—Ä—è –∑–∞ ID
const getRenterById = async (req, res) => {
  const renterId = req.params.id;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  const validation = validateObjectId(renterId, 'ID –æ—Ä–µ–Ω–¥–∞—Ä—è');
  if (!validation.isValid) {
    return res.status(validation.error.status).json(validation.error);
  }

  try {
    const renter = await findRenterById(renterId);

    if (renter.length === VALIDATION.MIN_VALUE) {
      return res
        .status(HTTP_STATUS.NOT_FOUND)
        .json({ message: '–û—Ä–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ renter: renter[0] });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∞—Ä—è:', error);
    res
      .status(HTTP_STATUS.INTERNAL_ERROR)
      .json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∞—Ä—è –∑–∞ ID (PATCH)
const updateRenter = async (req, res) => {
  const renterId = req.params.id;
  const updateFields = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ID –æ—Ä–µ–Ω–¥–∞—Ä—è
  const idValidation = validateObjectId(renterId, 'ID –æ—Ä–µ–Ω–¥–∞—Ä—è');
  if (!idValidation.isValid) {
    return res.status(idValidation.error.status).json(idValidation.error);
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  const dataValidation = validateUpdateData(updateFields);
  if (!dataValidation.isValid) {
    return res.status(dataValidation.error.status).json(dataValidation.error);
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –æ—Ä–µ–Ω–¥–∞—Ä
    const existingRenter = await checkRenterExists(renterId);
    if (!existingRenter) {
      return res
        .status(HTTP_STATUS.NOT_FOUND)
        .json({ message: '–û—Ä–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è house_id, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞
    if (updateFields.house_id) {
      const house = await findHouseById(updateFields.house_id);
      if (!house) {
        return res
          .status(HTTP_STATUS.NOT_FOUND)
          .json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É –∑ —Ç–∞–∫–∏–º house_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const fieldsToUpdate = prepareUpdateFields(updateFields);

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∞—Ä—è
    const result = await updateRenterById(renterId, fieldsToUpdate);

    if (result.matchedCount === VALIDATION.MIN_VALUE) {
      return res
        .status(HTTP_STATUS.NOT_FOUND)
        .json({ message: '–û—Ä–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –æ—Ä–µ–Ω–¥–∞—Ä—è
    const updatedRenter = await getUpdatedRenterWithHouse(renterId);

    res.json({
      message: '–û—Ä–µ–Ω–¥–∞—Ä—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      renter: updatedRenter[0],
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∞—Ä—è:', error);
    res
      .status(HTTP_STATUS.INTERNAL_ERROR)
      .json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –æ—Ä–µ–Ω–¥–∞—Ä—è.' });
  }
};

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∞—Ä—è –∑–∞ ID
const deleteRenter = async (req, res) => {
  const renterId = req.params.id;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  const validation = validateObjectId(renterId, 'ID –æ—Ä–µ–Ω–¥–∞—Ä—è');
  if (!validation.isValid) {
    return res.status(validation.error.status).json(validation.error);
  }

  try {
    const result = await deleteRenterById(renterId);

    if (result.deletedCount === VALIDATION.MIN_VALUE) {
      return res
        .status(HTTP_STATUS.NOT_FOUND)
        .json({ message: '–û—Ä–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–û—Ä–µ–Ω–¥–∞—Ä—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∞—Ä—è:', error);
    res
      .status(HTTP_STATUS.INTERNAL_ERROR)
      .json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–µ–Ω–¥–∞—Ä—è.' });
  }
};

export { createRenter, getRenters, getRenterById, updateRenter, deleteRenter };
