const { getDB } = require('../../config/db');
const { ObjectId } = require('mongodb');

// üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∏–ª—å—Ü—è
const createTenant = async (req, res) => {
  const {
    house_id,
    name,
    start,
    finish,
    pricePerMonth
  } = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
  if (!house_id || !name || !start || !pricePerMonth) {
    return res.status(400).json({
      message: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: house_id, name, start, pricePerMonth',
      requiredFields: ['house_id', 'name', 'start', 'pricePerMonth']
    });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId –¥–ª—è house_id
  if (!ObjectId.isValid(house_id)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç house_id' });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
  if (pricePerMonth <= 0) {
    return res.status(400).json({
      message: '–¶—ñ–Ω–∞ –∑–∞ –º—ñ—Å—è—Ü—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è'
    });
  }

  try {
    const db = getDB();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∑ —Ç–∞–∫–∏–º ID
    const house = await db.collection('houses').findOne({ _id: new ObjectId(house_id) });
    if (!house) {
      return res.status(404).json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const newTenant = {
      house_id: new ObjectId(house_id),
      name: name.trim(),
      start: new Date(start),
      finish: finish ? new Date(finish) : new Date(), // –Ø–∫—â–æ finish –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å—Ç–∞–≤–∏–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
      pricePerMonth: parseFloat(pricePerMonth),
      createdAt: new Date()
    };

    const result = await db.collection('tenants').insertOne(newTenant);
    console.log('–í—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∂–∏–ª–µ—Ü—å:', result.insertedId);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∂–∏–ª—å—Ü—è –∑ ID —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä—É
    const createdTenant = {
      ...newTenant,
      _id: result.insertedId,
      house: {
        _id: house._id,
        apartmentName: house.apartmentName,
        street: house.street
      }
    };

    res.status(201).json({
      message: '–ñ–∏–ª—å—Ü—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      tenant: createdTenant
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∂–∏–ª—å—Ü—è:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∂–∏–ª—å—Ü—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
const getTenants = async (req, res) => {
  try {
    const db = getDB();

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    const house_id = req.query.house_id; // –§—ñ–ª—å—Ç—Ä –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if (page < 1) {
      return res.status(400).json({ message: '–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0' });
    }

    if (limit < 1 || limit > 100) {
      return res.status(400).json({ message: '–õ—ñ–º—ñ—Ç –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100' });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É
    let filter = {};
    if (house_id) {
      if (!ObjectId.isValid(house_id)) {
        return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç house_id' });
      }
      filter.house_id = new ObjectId(house_id);
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∂–∏–ª—å—Ü—ñ–≤
    const totalCount = await db.collection('tenants').countDocuments(filter);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∏–ª—å—Ü—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏
    const tenants = await db.collection('tenants').aggregate([
      { $match: filter },
      {
        $lookup: {
          from: 'houses',
          localField: 'house_id',
          foreignField: '_id',
          as: 'house'
        }
      },
      { $unwind: '$house' },
      {
        $project: {
          _id: 1,
          house_id: 1,
          name: 1,
          start: 1,
          finish: 1,
          pricePerMonth: 1,
          createdAt: 1,
          'house._id': 1,
          'house.apartmentName': 1,
          'house.street': 1,
          'house.floor': 1
        }
      },
      { $sort: { createdAt: -1 } },
      { $skip: skip },
      { $limit: limit }
    ]).toArray();

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    const totalPages = Math.ceil(totalCount / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    res.json({
      tenants,
      pagination: {
        currentPage: page,
        totalPages,
        totalCount,
        limit,
        hasNextPage,
        hasPrevPage,
        nextPage: hasNextPage ? page + 1 : null,
        prevPage: hasPrevPage ? page - 1 : null
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∂–∏–ª—å—Ü—ñ–≤:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üëÅÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –∂–∏–ª—å—Ü—è –∑–∞ ID
const getTenantById = async (req, res) => {
  const tenantId = req.params.id;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  if (!ObjectId.isValid(tenantId)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∂–∏–ª—å—Ü—è' });
  }

  try {
    const db = getDB();

    const tenant = await db.collection('tenants').aggregate([
      { $match: { _id: new ObjectId(tenantId) } },
      {
        $lookup: {
          from: 'houses',
          localField: 'house_id',
          foreignField: '_id',
          as: 'house'
        }
      },
      { $unwind: '$house' },
      {
        $project: {
          _id: 1,
          house_id: 1,
          name: 1,
          start: 1,
          finish: 1,
          pricePerMonth: 1,
          createdAt: 1,
          'house._id': 1,
          'house.apartmentName': 1,
          'house.street': 1,
          'house.floor': 1,
          'house.roomsCount': 1
        }
      }
    ]).toArray();

    if (tenant.length === 0) {
      return res.status(404).json({ message: '–ñ–∏–ª—å—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ tenant: tenant[0] });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∂–∏–ª—å—Ü—è:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∏–ª—å—Ü—è –∑–∞ ID (PATCH)
const updateTenant = async (req, res) => {
  const tenantId = req.params.id;
  const updateFields = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  if (!ObjectId.isValid(tenantId)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∂–∏–ª—å—Ü—è' });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è house_id, —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
  if (updateFields.house_id && !ObjectId.isValid(updateFields.house_id)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç house_id' });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è
  if (updateFields.pricePerMonth !== undefined && updateFields.pricePerMonth <= 0) {
    return res.status(400).json({
      message: '–¶—ñ–Ω–∞ –∑–∞ –º—ñ—Å—è—Ü—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è'
    });
  }

  try {
    const db = getDB();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∂–∏–ª–µ—Ü—å
    const existingTenant = await db.collection('tenants').findOne({ _id: new ObjectId(tenantId) });
    if (!existingTenant) {
      return res.status(404).json({ message: '–ñ–∏–ª—å—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è house_id, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞
    if (updateFields.house_id) {
      const house = await db.collection('houses').findOne({ _id: new ObjectId(updateFields.house_id) });
      if (!house) {
        return res.status(404).json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É –∑ —Ç–∞–∫–∏–º house_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
      }
      updateFields.house_id = new ObjectId(updateFields.house_id);
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const fieldsToUpdate = { ...updateFields };

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
    if (fieldsToUpdate.pricePerMonth) fieldsToUpdate.pricePerMonth = parseFloat(fieldsToUpdate.pricePerMonth);
    if (fieldsToUpdate.start) fieldsToUpdate.start = new Date(fieldsToUpdate.start);
    if (fieldsToUpdate.finish) fieldsToUpdate.finish = new Date(fieldsToUpdate.finish);
    if (fieldsToUpdate.name) fieldsToUpdate.name = fieldsToUpdate.name.trim();

    // –î–æ–¥–∞—î–º–æ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    fieldsToUpdate.updatedAt = new Date();

    const result = await db.collection('tenants').updateOne(
      { _id: new ObjectId(tenantId) },
      { $set: fieldsToUpdate }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: '–ñ–∏–ª—å—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∂–∏–ª—å—Ü—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä—É
    const updatedTenant = await db.collection('tenants').aggregate([
      { $match: { _id: new ObjectId(tenantId) } },
      {
        $lookup: {
          from: 'houses',
          localField: 'house_id',
          foreignField: '_id',
          as: 'house'
        }
      },
      { $unwind: '$house' }
    ]).toArray();

    res.json({
      message: '–ñ–∏–ª—å—Ü—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      tenant: updatedTenant[0]
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∂–∏–ª—å—Ü—è:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∂–∏–ª—å—Ü—è.' });
  }
};

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∏–ª—å—Ü—è –∑–∞ ID
const deleteTenant = async (req, res) => {
  const tenantId = req.params.id;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  if (!ObjectId.isValid(tenantId)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∂–∏–ª—å—Ü—è' });
  }

  try {
    const db = getDB();
    const result = await db.collection('tenants').deleteOne({ _id: new ObjectId(tenantId) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: '–ñ–∏–ª—å—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–ñ–∏–ª—å—Ü—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∂–∏–ª—å—Ü—è:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∂–∏–ª—å—Ü—è.' });
  }
};

module.exports = {
  createTenant,
  getTenants,
  getTenantById,
  updateTenant,
  deleteTenant
};