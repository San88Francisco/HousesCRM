const { getDB } = require('../../config/db');
const { ObjectId } = require('mongodb');

// üè† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä–∏
const createHouse = async (req, res) => {
  const {
    apartmentName,
    roomsCount,
    totalArea,
    priceUAH,
    usdRate,
    apartmentType,
    floor,
    street
  } = req.body;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
  if (!apartmentName || !roomsCount || !totalArea || !priceUAH || !usdRate || !apartmentType || !floor || !street) {
    return res.status(400).json({
      message: '–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏',
      requiredFields: [
        'apartmentName', 'roomsCount', 'totalArea',
        'priceUAH', 'usdRate', 'apartmentType', 'floor', 'street'
      ]
    });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É –∫–≤–∞—Ä—Ç–∏—Ä–∏
  if (!['–ø–µ—Ä–≤–∏—á–∫–∞', '–≤—Ç–æ—Ä–∏—á–Ω–∞'].includes(apartmentType)) {
    return res.status(400).json({
      message: '–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä–∏ –º–∞—î –±—É—Ç–∏ "–ø–µ—Ä–≤–∏—á–∫–∞" –∞–±–æ "–≤—Ç–æ—Ä–∏—á–Ω–∞"'
    });
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
  if (roomsCount <= 0 || totalArea <= 0 || priceUAH <= 0 || usdRate <= 0 || floor <= 0) {
    return res.status(400).json({
      message: '–ß–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è'
    });
  }

  const newApartment = {
    apartmentName: apartmentName.trim(),
    roomsCount: parseInt(roomsCount),
    totalArea: parseFloat(totalArea),
    priceUAH: parseFloat(priceUAH),
    usdRate: parseFloat(usdRate),
    priceUSD: parseFloat((priceUAH / usdRate).toFixed(2)), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ –≤ –¥–æ–ª–∞—Ä–∞—Ö
    apartmentType,
    floor: parseInt(floor),
    street: street.trim(),
    createdAt: new Date()
  };

  try {
    const db = getDB();
    const result = await db.collection('houses').insertOne(newApartment);
    console.log('–í—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞:', result.insertedId);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—É –∑ ID
    const createdApartment = { ...newApartment, _id: result.insertedId };

    res.status(201).json({
      message: '–ö–≤–∞—Ä—Ç–∏—Ä—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      apartment: createdApartment
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
const getHouses = async (req, res) => {
  try {
    const db = getDB();

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    if (page < 1) {
      return res.status(400).json({ message: '–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0' });
    }

    if (limit < 1 || limit > 100) {
      return res.status(400).json({ message: '–õ—ñ–º—ñ—Ç –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100' });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–≤–∞—Ä—Ç–∏—Ä
    const totalCount = await db.collection('houses').countDocuments();

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    const apartments = await db.collection('houses')
      .find()
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .toArray();

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    const totalPages = Math.ceil(totalCount / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    res.json({
      apartments,
      pagination: {
        currentPage: page,
        totalPages,
        totalCount,
        limit,
        hasNextPage,
        hasPrevPage,
        nextPage: hasNextPage ? page + 1 : null,
        prevPage: hasPrevPage ? page - 1 : null
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–≤–∞—Ä—Ç–∏—Ä:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.' });
  }
};

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑–∞ ID
const deleteHouse = async (req, res) => {
  const apartmentId = req.params.id;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è ObjectId
  if (!ObjectId.isValid(apartmentId)) {
    return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–≤–∞—Ä—Ç–∏—Ä–∏' });
  }

  try {
    const db = getDB();
    const result = await db.collection('houses').deleteOne({ _id: new ObjectId(apartmentId) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–ö–≤–∞—Ä—Ç–∏—Ä—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É.' });
  }
};

module.exports = { createHouse, getHouses, deleteHouse };